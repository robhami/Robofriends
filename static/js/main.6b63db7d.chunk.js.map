{"version":3,"sources":["Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","props","console","log","ErrorBoundary","state","hasError","error","info","this","setState","children","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oOAyBeA,EAtBE,SAAC,GAAa,EAAZC,OAEjB,MAAM,IAAIC,MAAM,aCYHC,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEnB,OACC,yBAAKC,UAAU,OACd,2BACAA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCAEK,EARA,SAACC,GAEf,OADAC,QAAQC,IAAIF,GAGXA,EAFD,UCsBcG,E,kDAvBd,WAAYH,GAAQ,IAAD,8BAClB,cAAMA,IACDI,MAAQ,CAEXC,UAAU,GAJM,E,8DAQAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACP,sDAGDG,KAAKR,MAAMU,a,GAnBOC,aC+DbC,G,wDAzDd,aAAgB,IAAD,8BACd,gBAyBDC,eAAiB,SAACC,GAEjB,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SA1B1C,EAAKb,MAAQ,CACZb,OAAQ,GACRwB,YAAa,IAGdd,QAAQC,IAAI,eAPE,E,gEAWM,IAAD,OACnBgB,MAAO,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAIlBF,MAAK,SAAAG,GACJ,EAAKb,SAAS,CAAElB,OAAQ+B,IACxBrB,QAAQC,IAAI,0B,+BAYJ,IAAD,EACuBM,KAAKJ,MAA5Bb,EADA,EACAA,OAAQwB,EADR,EACQA,YACVQ,EAAiBhC,EAAOiC,QAAO,SAAAC,GAEnC,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAIvD,OAAQpC,EAAOsC,OAGd,yBAAKlC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcc,KAAKK,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,OAAQgC,OAPpB,2C,GA1CcZ,cCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAER,kBAAC,EAAD,MAEDC,SAASC,eAAe,SDqHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLL,QAAQK,MAAMA,EAAMuC,a","file":"static/js/main.6b63db7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tif (true) {\r\n\t\tthrow new Error(\"NOOOOOO!\");\r\n\t}\r\n\treturn (\r\n\t\t\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn(\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\tid={robots[i].id} name={robots[i].name} email={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"search robots\"\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\t\r\n\tconsole.log(props);\r\n\treturn (\r\n\t\t// <div style={{overflowY:'scroll', border:'5px solid black', height: '500px'}}>\r\n\t\tprops.children\r\n\t\t// </div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t\r\n\t\t\t\thasError: false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcomponentDidCatch(error, info) {\r\n\t\t\tthis.setState({hasError: true})\r\n\r\n\t\t}\r\n\r\n\t\trender () {\r\n\t\t\tif (this.state.hasError) {\r\n\t\t\t\treturn <h1> Something went wrong </h1>\r\n\t\t\t}\r\n\r\n\t\t\treturn this.props.children\r\n\t\t}\r\n\t\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor () {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\r\n\t\t}\r\n\t\tconsole.log('constructor');\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch ('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response =>{\r\n\t\t\t\t\treturn response.json();\r\n\r\n\t\t})\r\n\r\n\t\t.then(users=> {\r\n\t\t\t\tthis.setState({ robots: users });\r\n\t\t\t\tconsole.log('componentDidMount');\r\n\t\t});\r\n\t}\r\n\r\n\r\n\r\n\tonSearchChange = (event) =>{\r\n\r\n\t\tthis.setState({ searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\r\n\trender () {\r\n\t\t\tconst { robots, searchfield } =this.state;\r\n\t\t\tconst filteredRobots = robots.filter(robot => {\r\n\r\n\t\t\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t\t\r\n\t\t\t\t\t})\r\n\t\t\t\r\n\t\t\treturn !robots.length ?\r\n\t\t\t\t<h1>Loading</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\n// import Card from './Card';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { robots } from './robots';\n\nReactDOM.render(\n\n\t<App/>\n,\ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}